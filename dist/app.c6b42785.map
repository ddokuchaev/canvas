{"version":3,"sources":["utils.js","tooltip.js","slider.js","chart.js","data.js","app.js"],"names":["toDate","timestamp","withDay","shortMonths","date","Date","getDay","getMonth","getDate","isOver","mouse","x","length","DPI_WIDTH","width","Math","abs","line","ctx","coords","color","beginPath","lineWidth","strokeStyle","y","lineTo","stroke","closePath","circle","fillStyle","arc","PI","fill","boundaries","columns","types","min","max","forEach","col","i","css","el","styles","assign","style","toCoords","xRatio","yRatio","DPI_HEIGHT","PADDING","map","floor","tooltip","template","data","title","items","item","value","name","join","left","top","getBoundingClientRect","height","innerHTML","insertAdjacentHTML","display","sliderChart","HEIGHT","root","WIDTH","canvas","querySelector","getContext","yMin","yMax","yData","filter","idx","colors","chart","VIEW_HEIGHT","VIEW_WIDTH","ROWS_COUNT","tip","raf","addEventListener","mousemove","mouseleave","proxy","Proxy","result","Reflect","set","requestAnimationFrame","paint","clientX","clientY","hide","clearRect","xData","yAxis","step","textStep","font","text","round","fillText","toString","moveTo","xAxis","colsCount","save","restore","show","names","removeEventListener","getChartData","tgChart","document","getElementById","init"],"mappings":"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AA,EAAA,OAAA,EAAA,IAIxDD,IAAAA,IAAQ,EAARA,EAAAA,EAAQ,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAhBR,EAAgB,EAAA,GAAda,EAAc,EAAA,GACrB,IAAA,EAAOmE,EAAAA,QAAAA,EAAMjF,MAAOC,EAAGQ,EAAOP,OAAQC,GAAY,EAC1CK,EAAAA,EAAAA,QAAAA,EAAK,CAACP,EAAEa,GAAIJ,GACnB,QAPoE,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,KAAA,GAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,MAa7E,MAAA,CAAA,KACI,WACH6E,KAFD,QAIO,WACeV,qBAAAA,GACd+B,EAAAA,oBAAoB,YAAY7B,GAChC6B,EAAAA,oBAAoB,aAAa5B;;;;ACmOnD,aA7WM,SAAS6B,IACP,MACL,CACW,QAAA,CACP,CACE,IACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,YAEF,CACE,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IAEF,CACE,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAGG,MAAA,CACD,GAAA,OACA,GAAA,OACD,EAAA,KAEE,MAAA,CACD,GAAA,KACA,GAAA,MAEE,OAAA,CACF,GAAA,UACA,GAAA,YAIX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7WeA,QAAAA,aAAAA;;ACKhB,aALA,IAAA,EAAA,QAAA,WACA,QAAA,iBACA,IAAA,EAAA,QAAA,UAEMC,GAAU,EAAMC,EAAAA,OAAAA,SAASC,eAAe,UAAU,EAAxC,EAAA,iBAChBF,EAAQG","file":"app.c6b42785.map","sourceRoot":"..\\src","sourcesContent":["export function toDate(timestamp, withDay) {\r\n    const shortMonths = [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n    ];\r\n    const shortDays = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\r\n    const date = new Date(timestamp);\r\n    if(withDay) {\r\n        return  `${shortDays[date.getDay()]}, ${\r\n            shortMonths[date.getMonth()]} ${date.getDate()}`\r\n    }\r\n    return `${shortMonths[date.getMonth()]} ${date.getDate()}`;\r\n}\r\n\r\nexport function isOver(mouse, x, length, DPI_WIDTH) {\r\n    if (!mouse) {\r\n        return  false;\r\n    }\r\n    const width = DPI_WIDTH / length\r\n    return Math.abs(x - mouse.x) < width / 2;\r\n}\r\n\r\nexport function line(ctx, coords, {color}) {\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 4\r\n    ctx.strokeStyle = color;\r\n    for (const [x, y] of coords) {\r\n        ctx.lineTo(x, y);\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\n\r\nexport function circle(ctx, [x,y], color) {\r\n    const CIRCLE_RADIUS = 8;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = color;\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.arc(x, y, CIRCLE_RADIUS, 0, Math.PI * 2);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\n\r\nexport function boundaries ({columns , types}) {\r\n    let min;\r\n    let max;\r\n    columns.forEach(col => {\r\n        if (types[col[0]] !== \"line\") return;\r\n        if (typeof min !== \"number\") min = col[1];\r\n        if (typeof max !== \"number\") max = col[1];\r\n\r\n        if (min > col[1]) min = col[1];\r\n        if (max < col[1]) max = col[1];\r\n\r\n        for (let i = 2; i < col.length; i++) {\r\n            if (min > col[i]) min = col[i];\r\n            if (max < col[i]) max = col[i];\r\n        }\r\n\r\n    });\r\n    return [min, max];\r\n}\r\n\r\nexport function css(el, styles = {}) {\r\n    Object.assign(el.style, styles)\r\n}\r\n\r\nexport function toCoords(xRatio, yRatio, DPI_HEIGHT, PADDING) {\r\n    return (col)  => col.map((y,i) =>\r\n        [\r\n            Math.floor(xRatio * (i - 1)),\r\n            Math.floor(DPI_HEIGHT - PADDING - y * yRatio)\r\n        ]);\r\n};\r\n","import {css} from \"./utils\"\r\n\r\nconst template = (data) => `\r\n    <div class=\"tooltip-title\">${data.title}</div>\r\n    <ul class=\"tooltip-list\">\r\n    ${data.items\r\n    .map((item) => {\r\n        return `<li class=\"tooltip-list-item\">\r\n                <div class=\"value\" style=\"color: ${item.color}\">${item.value}</div>\r\n                <div class=\"name\" style=\"color: ${item.color}\">${item.name}</div>\r\n                </li>`\r\n    }).join(\"\\n\")}\r\n    </ul>\r\n`;\r\n\r\nexport function tooltip(el) {\r\n    const clear = () => { el.innerHTML = \"\"};\r\n    return {\r\n        show({left, top}, data) {\r\n            const {height, width} = el.getBoundingClientRect()\r\n            clear();\r\n            css(el, {\r\n                display: \"block\",\r\n                top: (top - height) + \"px\",\r\n                left: (left + width/2) + \"px\"\r\n\r\n            })\r\n            el.insertAdjacentHTML(\"afterbegin\", template(data));\r\n        },\r\n        hide() {\r\n            css(el, {display : \"none\"})\r\n        }\r\n    }\r\n}","import {boundaries, circle, css, isOver, line, toCoords} from \"./utils\";\r\n\r\nconst HEIGHT = 40;\r\nconst DPI_HEIGHT = HEIGHT * 2;\r\n\r\n\r\nexport function sliderChart(root, data, DPI_WIDTH) {\r\n    const WIDTH = DPI_WIDTH / 2;\r\n    const canvas = root.querySelector(\"canvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n    canvas.width = DPI_WIDTH;\r\n    canvas.height = DPI_HEIGHT;\r\n    css(canvas,{\r\n        width : WIDTH + \"px\",\r\n        height : HEIGHT + \"px\",\r\n    });\r\n\r\n    const [yMin, yMax] = boundaries(data);\r\n    const yRatio = DPI_HEIGHT / (yMax - yMin);\r\n    const xRatio = DPI_WIDTH / (data.columns[0].length - 2);\r\n    const yData = data.columns.filter(col => data.types[col[0]] === 'line');\r\n\r\n    // Painting\r\n    yData.map(toCoords(xRatio,yRatio,DPI_HEIGHT, -5)).forEach((coords, idx) => {\r\n        const color = data.colors[yData[idx][0]];\r\n        line(ctx,coords,{color});\r\n    });\r\n\r\n};","import {toDate, isOver, line, circle, boundaries, css, toCoords} from \"./utils\"\r\nimport {tooltip} from \"./tooltip\";\r\nimport {sliderChart} from \"./slider\"\r\n\r\nconst WIDTH = 600;\r\nconst HEIGHT = 200;\r\nconst PADDING = 40;\r\nconst DPI_WIDTH = WIDTH * 2;\r\nconst DPI_HEIGHT = HEIGHT * 2;\r\nconst VIEW_HEIGHT = DPI_HEIGHT - 2 * PADDING;\r\nconst VIEW_WIDTH = DPI_WIDTH;\r\nconst ROWS_COUNT = 5;\r\n\r\n\r\nexport function chart(root, data) {\r\n    const canvas = root.querySelector('[data-el=\"main\"]');\r\n    const tip = tooltip(root.querySelector('[data-el=\"tooltip\"]'));\r\n    const slider = sliderChart(root.querySelector('[data-el=\"slider\"]'), data, DPI_WIDTH);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let raf;\r\n    canvas.width = DPI_WIDTH;\r\n    canvas.height = DPI_HEIGHT;\r\n    css(canvas,{\r\n        width : WIDTH + \"px\",\r\n        height : HEIGHT + \"px\",\r\n    });\r\n\r\n    canvas.addEventListener(\"mousemove\",mousemove);\r\n    canvas.addEventListener(\"mouseleave\",mouseleave);\r\n\r\n    const proxy = new Proxy({}, {\r\n        set(...args) {\r\n            const result = Reflect.set(...args);\r\n            raf = requestAnimationFrame(paint);\r\n            return result;\r\n        }\r\n    })\r\n\r\n    function mousemove({clientX, clientY}) {\r\n        const { left, top } = canvas.getBoundingClientRect()\r\n        proxy.mouse = {\r\n            x: (clientX - left) * 2,\r\n            tooltip : {\r\n                left: clientX - left,\r\n                top: clientY - top\r\n            }\r\n        }\r\n    };\r\n\r\n    function mouseleave() {\r\n        proxy.mouse = null;\r\n        tip.hide();\r\n    };\r\n\r\n    function clear() {\r\n        ctx.clearRect(0,0, DPI_WIDTH, DPI_HEIGHT);\r\n    }\r\n\r\n    function xAxis(xData, yData, xRatio) {\r\n        const colsCount = 6;\r\n        const step = Math.round((xData.length - 1) / colsCount);\r\n        ctx.beginPath();\r\n        for (let i = 1; i < xData.length; i++) {\r\n            const x = i * xRatio;\r\n            if((i - 1) % step === 0 ) {\r\n                const text = toDate(xData[i]);\r\n                ctx.fillText(text, x, DPI_HEIGHT - 10);\r\n            }\r\n            if(isOver(proxy.mouse, x, xData.length, DPI_WIDTH)) {\r\n                ctx.save();\r\n                ctx.moveTo(x, PADDING / 2);\r\n                ctx.lineTo(x, DPI_HEIGHT - PADDING);\r\n                ctx.restore();\r\n                tip.show(proxy.mouse.tooltip, {\r\n                    title : toDate(xData[i]),\r\n                    items : yData.map((col) => ({\r\n                            color: data.colors[col[0]],\r\n                            name : data.names[col[0]],\r\n                            value : col[i + 1]\r\n                    }))\r\n                });\r\n            }\r\n        }\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    function yAxis(yMin, yMax) {\r\n        const step = VIEW_HEIGHT / ROWS_COUNT;\r\n        const textStep = (yMax - yMin) / ROWS_COUNT;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = \"#bbb\";\r\n        ctx.font = \"normal 20px Helvetica, sanse-serif\";\r\n        ctx.fillStyle = \"#96a2aa\";\r\n        for (let i = 1; i <= ROWS_COUNT; i++ ) {\r\n            const y = step * i;\r\n            const text = Math.round(yMax - textStep * i);\r\n            ctx.fillText(text.toString(), 5, y + PADDING - 10);\r\n            ctx.moveTo(0, y + PADDING);\r\n            ctx.lineTo(DPI_WIDTH, y + PADDING);\r\n        }\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    function paint() {\r\n        clear();\r\n        const [yMin, yMax] = boundaries(data);\r\n        const yRatio = VIEW_HEIGHT / (yMax - yMin);\r\n        const xRatio = VIEW_WIDTH / (data.columns[0].length - 2);\r\n\r\n        const yData = data.columns.filter(col => data.types[col[0]] === 'line');\r\n        const xData = data.columns.filter(col => data.types[col[0]] !== 'line')[0];\r\n\r\n        // Painting\r\n        yAxis(yMin, yMax);\r\n        xAxis(xData, yData, xRatio);\r\n        yData.map(toCoords(xRatio,yRatio,DPI_HEIGHT, PADDING)).forEach((coords, idx) => {\r\n            const color = data.colors[yData[idx][0]];\r\n            line(ctx,coords,{color});\r\n\r\n            for (const [x,y] of coords) {\r\n                if(isOver(proxy.mouse, x, coords.length, DPI_WIDTH)) {\r\n                    circle(ctx, [x,y], color);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            paint();\r\n        },\r\n        destroy() {\r\n            cancelAnimationFrame(raf);\r\n            canvas.removeEventListener(\"mousemove\",mousemove)\r\n            canvas.removeEventListener(\"mouseleave\",mouseleave)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export function getChartData() {\r\n  return [\r\n    {\r\n      columns: [\r\n        [\r\n          'x',\r\n          1542412800000,\r\n          1542499200000,\r\n          1542585600000,\r\n          1542672000000,\r\n          1542758400000,\r\n          1542844800000,\r\n          1542931200000,\r\n          1543017600000,\r\n          1543104000000,\r\n          1543190400000,\r\n          1543276800000,\r\n          1543363200000,\r\n          1543449600000,\r\n          1543536000000,\r\n          1543622400000,\r\n          1543708800000,\r\n          1543795200000,\r\n          1543881600000,\r\n          1543968000000,\r\n          1544054400000,\r\n          1544140800000,\r\n          1544227200000,\r\n          1544313600000,\r\n          1544400000000,\r\n          1544486400000,\r\n          1544572800000,\r\n          1544659200000,\r\n          1544745600000,\r\n          1544832000000,\r\n          1544918400000,\r\n          1545004800000,\r\n          1545091200000,\r\n          1545177600000,\r\n          1545264000000,\r\n          1545350400000,\r\n          1545436800000,\r\n          1545523200000,\r\n          1545609600000,\r\n          1545696000000,\r\n          1545782400000,\r\n          1545868800000,\r\n          1545955200000,\r\n          1546041600000,\r\n          1546128000000,\r\n          1546214400000,\r\n          1546300800000,\r\n          1546387200000,\r\n          1546473600000,\r\n          1546560000000,\r\n          1546646400000,\r\n          1546732800000,\r\n          1546819200000,\r\n          1546905600000,\r\n          1546992000000,\r\n          1547078400000,\r\n          1547164800000,\r\n          1547251200000,\r\n          1547337600000,\r\n          1547424000000,\r\n          1547510400000,\r\n          1547596800000,\r\n          1547683200000,\r\n          1547769600000,\r\n          1547856000000,\r\n          1547942400000,\r\n          1548028800000,\r\n          1548115200000,\r\n          1548201600000,\r\n          1548288000000,\r\n          1548374400000,\r\n          1548460800000,\r\n          1548547200000,\r\n          1548633600000,\r\n          1548720000000,\r\n          1548806400000,\r\n          1548892800000,\r\n          1548979200000,\r\n          1549065600000,\r\n          1549152000000,\r\n          1549238400000,\r\n          1549324800000,\r\n          1549411200000,\r\n          1549497600000,\r\n          1549584000000,\r\n          1549670400000,\r\n          1549756800000,\r\n          1549843200000,\r\n          1549929600000,\r\n          1550016000000,\r\n          1550102400000,\r\n          1550188800000,\r\n          1550275200000,\r\n          1550361600000,\r\n          1550448000000,\r\n          1550534400000,\r\n          1550620800000,\r\n          1550707200000,\r\n          1550793600000,\r\n          1550880000000,\r\n          1550966400000,\r\n          1551052800000,\r\n          1551139200000,\r\n          1551225600000,\r\n          1551312000000,\r\n          1551398400000,\r\n          1551484800000,\r\n          1551571200000,\r\n          1551657600000,\r\n          1551744000000,\r\n          1551830400000,\r\n          1551916800000,\r\n          1552003200000,\r\n        ],\r\n        [\r\n          'y0',\r\n          37,\r\n          20,\r\n          32,\r\n          39,\r\n          32,\r\n          35,\r\n          19,\r\n          65,\r\n          36,\r\n          62,\r\n          113,\r\n          69,\r\n          120,\r\n          60,\r\n          51,\r\n          49,\r\n          71,\r\n          122,\r\n          149,\r\n          69,\r\n          57,\r\n          21,\r\n          33,\r\n          55,\r\n          92,\r\n          62,\r\n          47,\r\n          50,\r\n          56,\r\n          116,\r\n          63,\r\n          60,\r\n          55,\r\n          65,\r\n          76,\r\n          33,\r\n          45,\r\n          64,\r\n          54,\r\n          81,\r\n          180,\r\n          123,\r\n          106,\r\n          37,\r\n          60,\r\n          70,\r\n          46,\r\n          68,\r\n          46,\r\n          51,\r\n          33,\r\n          57,\r\n          75,\r\n          70,\r\n          95,\r\n          70,\r\n          50,\r\n          68,\r\n          63,\r\n          66,\r\n          53,\r\n          38,\r\n          52,\r\n          109,\r\n          121,\r\n          53,\r\n          36,\r\n          71,\r\n          96,\r\n          55,\r\n          58,\r\n          29,\r\n          31,\r\n          55,\r\n          52,\r\n          44,\r\n          126,\r\n          191,\r\n          73,\r\n          87,\r\n          255,\r\n          278,\r\n          219,\r\n          170,\r\n          129,\r\n          125,\r\n          126,\r\n          84,\r\n          65,\r\n          53,\r\n          154,\r\n          57,\r\n          71,\r\n          64,\r\n          75,\r\n          72,\r\n          39,\r\n          47,\r\n          52,\r\n          73,\r\n          89,\r\n          156,\r\n          86,\r\n          105,\r\n          88,\r\n          45,\r\n          33,\r\n          56,\r\n          142,\r\n          124,\r\n          114,\r\n          64,\r\n        ],\r\n        [\r\n          'y1',\r\n          22,\r\n          12,\r\n          30,\r\n          40,\r\n          33,\r\n          23,\r\n          18,\r\n          41,\r\n          45,\r\n          69,\r\n          57,\r\n          61,\r\n          70,\r\n          47,\r\n          31,\r\n          34,\r\n          40,\r\n          55,\r\n          27,\r\n          57,\r\n          48,\r\n          32,\r\n          40,\r\n          49,\r\n          54,\r\n          49,\r\n          34,\r\n          51,\r\n          51,\r\n          51,\r\n          66,\r\n          51,\r\n          94,\r\n          60,\r\n          64,\r\n          28,\r\n          44,\r\n          96,\r\n          49,\r\n          73,\r\n          30,\r\n          88,\r\n          63,\r\n          42,\r\n          56,\r\n          67,\r\n          52,\r\n          67,\r\n          35,\r\n          61,\r\n          40,\r\n          55,\r\n          63,\r\n          61,\r\n          105,\r\n          59,\r\n          51,\r\n          76,\r\n          63,\r\n          57,\r\n          47,\r\n          56,\r\n          51,\r\n          98,\r\n          103,\r\n          62,\r\n          54,\r\n          104,\r\n          48,\r\n          41,\r\n          41,\r\n          37,\r\n          30,\r\n          28,\r\n          26,\r\n          37,\r\n          65,\r\n          86,\r\n          70,\r\n          81,\r\n          54,\r\n          74,\r\n          70,\r\n          50,\r\n          74,\r\n          79,\r\n          85,\r\n          62,\r\n          36,\r\n          46,\r\n          68,\r\n          43,\r\n          66,\r\n          50,\r\n          28,\r\n          66,\r\n          39,\r\n          23,\r\n          63,\r\n          74,\r\n          83,\r\n          66,\r\n          40,\r\n          60,\r\n          29,\r\n          36,\r\n          27,\r\n          54,\r\n          89,\r\n          50,\r\n          73,\r\n          52,\r\n        ],\r\n      ],\r\n      types: {\r\n        y0: 'line',\r\n        y1: 'line',\r\n        x: 'x',\r\n      },\r\n      names: {\r\n        y0: '#0',\r\n        y1: '#1',\r\n      },\r\n      colors: {\r\n        y0: '#3DC23F',\r\n        y1: '#F34C44',\r\n      },\r\n    },\r\n  ][0]\r\n}\r\n","import {chart} from \"./chart\";\r\nimport \"./styles.scss\";\r\nimport {getChartData} from \"./data\";\r\n\r\nconst tgChart = chart(document.getElementById(\"chart\"), getChartData());\r\ntgChart.init();\r\n"]}